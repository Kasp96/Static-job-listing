import{newComponent,buttonNew,buttonFeature}from"./components.min.js";document.addEventListener("DOMContentLoaded",function(){var s=document.querySelector(".main-container"),e=1;fetch("../src/data.json").then(function(n){return n.json()}).then(function(n){n.forEach(function(n){var t=document.createElement("div"),o=buttonNew,a=buttonFeature;!0===n.featured?t.setAttribute("data-new","true"):a="",!0!==n.new&&(o=""),t.classList.add("jobs__box","flex-column","flex-md-row","align-items-md-center","py-5","position-relative"),t.setAttribute("id","".concat(e)),t.innerHTML='<img class="jobs__logo" src="'.concat(n.logo,'" alt="company logo">\n                <div class="jobs__offer me-md-3 me-lg-0">\n                    <div class="jobs__header d-flex gap-3 gap-md-2">\n                        <p class="jobs__company-name me-4 me-md-3 mb-0">').concat(n.company,"</p>\n\n\t\t\t\t\t\t").concat(o,"\n                        ").concat(a,'\n                        \n                    </div>\n                    <p class="jobs__offered-job m-md-0 my-md-1 ">').concat(n.position,' </p>\n                    <p class="jobs__job-offer d-flex align-items-center\n                    pb-1 p-md-1 m-md-0">\n                        <span>').concat(n.postedAt,'</span>\n                        <span class="dot">&bull;</span>\n                        <span>').concat(n.contract,'</span>\n                        <span class="dot">&bull;</span>\n                        <span>').concat(n.location,'</span>\n                    </p>\n                </div>\n                <div class="jobs__tags d-flex gap-4 flex-wrap ms-md-auto">\n                    <button class="jobs__button">').concat(n.languages[0],'</button>\n                    <button class="jobs__button">').concat(n.languages[1],'</button>\n                    <button class="jobs__button">HTML</button>\n                    <button class="jobs__button">CSS</button>\n                    <button class="jobs__button">JavaScript</button>\n                </div>'),s.appendChild(t),e++})}).catch(function(n){return console.log("error")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlbmVyYXRlLmpzIl0sIm5hbWVzIjpbIm5ld0NvbXBvbmVudCIsImJ1dHRvbk5ldyIsImJ1dHRvbkZlYXR1cmUiLCJkb2N1bWVudCIsImNvbnRhaW5lciIsImxpc3RpbmdJRCIsInF1ZXJ5U2VsZWN0b3IiLCJmZXRjaCIsImZvckVhY2giLCJ0aGVuIiwicmVzIiwibmV3TGlzdGluZyIsImpzb24iLCJkYXRhIiwiYnRuRmVhdHVyZSIsImNyZWF0ZUVsZW1lbnQiLCJidG5OZXciLCJvYmoiLCJmZWF0dXJlZCIsInNldEF0dHJpYnV0ZSIsImNsYXNzTGlzdCIsImFkZCIsImZldGNoQVBJIiwiY29uY2F0IiwiaW5uZXJIVE1MIiwibG9nbyIsImNvbXBhbnkiLCJwb3NpdGlvbiIsInBvc3RlZEF0IiwiY29udHJhY3QiLCJsb2NhdGlvbiIsImxhbmd1YWdlcyIsImFwcGVuZENoaWxkIiwiZXJyIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ik9BQVNBLGFBQWNDLFVBQVdDLGFBQTBDLEtBQXJCLHNCQUV2REMsU0FDT0MsaUJBQW9CLG1CQUFlLFdBQXpDLElBQ0lDLEVBQWFGLFNBQUFHLGNBQUEsaUJBQUEsRUFFakJELEVBQWlCLEVBSWhCRSxNQUNXLGtCQUVKQyxFQUZMQyxLQUdDLFNBQUFDLEdBQU1DLE9BQUFBLEVBQVVDLEtBQUdULENBQUFBLENBQUFBLEVBRnBCTSxLQUdDLFNBQUFJLEdBRkRBLEVBR0NMLFFBQUlNLFNBQUFBLEdBRkosSUFJQUgsRUFBZ0JSLFNBQVNZLGNBQUUsS0FBQSxFQUh2QkMsRUFJSEwsVUFDQUcsRUFBTVosY0FFUCxDQUFBLElBQUFlLEVBQUFDLFNBSENQLEVBSU1RLGFBQVMsV0FBTSxNQUFBLEVBRnJCTCxFQUlELEdBVVdLLENBQUFBLElBQVhSLEVBQUFBLE1BWENLLEVBYURMLElBVkFBLEVBdUNDUyxVQUFBQyxJQUNELFlBQ1MsY0FBMEIsY0FDdEMsd0JBRURDLE9BQ0MsbUJBdENHLEVBQ0FYLEVBQVdRLGFBQWEsS0FBSSxHQUFBSSxPQUFLbEIsQ0FBUyxDQUFFLEVBRTVDTSxFQUFXYSxVQUFTLGdDQUFBRCxPQUFtQ04sRUFBSVEsS0FBSSxrT0FBQSxFQUFBRixPQUdNTixFQUFJUyxRQUFPLHNCQUFBLEVBQUFILE9BRTdFUCxFQUFNLDRCQUFBLEVBQUFPLE9BQ1lULEVBQVUsMkhBQUEsRUFBQVMsT0FHK0JOLEVBQUlVLFNBQVEsMEpBQUEsRUFBQUosT0FHL0NOLEVBQUlXLFNBQVEsa0dBQUEsRUFBQUwsT0FFWk4sRUFBSVksU0FBUSxrR0FBQSxFQUFBTixPQUVaTixFQUFJYSxTQUFRLDBMQUFBLEVBQUFQLE9BSU9OLEVBQUljLFVBQVUsR0FBRSw4REFBQSxFQUFBUixPQUNoQk4sRUFBSWMsVUFBVSxHQUFFLHdPQUFBLEVBTTlEM0IsRUFBVTRCLFlBQVlyQixDQUFVLEVBQ2hDTixDQUFTLEVBQ1YsQ0FBQyxDQUNGLENBQUMsRUFBQyxNQUNLLFNBQUM0QixHQUFHLE9BQUtDLFFBQVFDLElBQUksT0FBTyxDQUFDLENBQUEsQ0FJdkMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdDb21wb25lbnQsIGJ1dHRvbk5ldywgYnV0dG9uRmVhdHVyZSB9IGZyb20gJy4vY29tcG9uZW50cy5taW4uanMnO1xyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcclxuXHRjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi1jb250YWluZXInKTtcclxuXHRsZXQgbGlzdGluZ0lEID0gMTtcclxuXHJcblx0Y29uc3QgZmV0Y2hBUEkgPSAoKSA9PiB7XHJcblx0XHRsZXQgVVJMO1xyXG5cdFx0VVJMID0gJy4uL3NyYy9kYXRhLmpzb24nO1xyXG5cclxuXHRcdGZldGNoKFVSTClcclxuXHRcdFx0LnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSlcclxuXHRcdFx0LnRoZW4oKGRhdGEpID0+IHtcclxuXHRcdFx0XHRkYXRhLmZvckVhY2goKG9iaikgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc3QgbmV3TGlzdGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0XHRcdFx0bGV0IGJ0bk5ldyA9IGJ1dHRvbk5ldztcclxuXHRcdFx0XHRcdGxldCBidG5GZWF0dXJlID0gYnV0dG9uRmVhdHVyZTtcclxuXHJcblx0XHRcdFx0XHRpZiAob2JqLmZlYXR1cmVkID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRcdG5ld0xpc3Rpbmcuc2V0QXR0cmlidXRlKCdkYXRhLW5ldycsICd0cnVlJyk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRidG5GZWF0dXJlID0gJyc7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAob2JqLm5ldyAhPT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRidG5OZXcgPSAnJztcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRuZXdMaXN0aW5nLmNsYXNzTGlzdC5hZGQoXHJcblx0XHRcdFx0XHRcdCdqb2JzX19ib3gnLFxyXG5cdFx0XHRcdFx0XHQnZmxleC1jb2x1bW4nLFxyXG5cdFx0XHRcdFx0XHQnZmxleC1tZC1yb3cnLFxyXG5cdFx0XHRcdFx0XHQnYWxpZ24taXRlbXMtbWQtY2VudGVyJyxcclxuXHRcdFx0XHRcdFx0J3B5LTUnLFxyXG5cdFx0XHRcdFx0XHQncG9zaXRpb24tcmVsYXRpdmUnXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0bmV3TGlzdGluZy5zZXRBdHRyaWJ1dGUoJ2lkJywgYCR7bGlzdGluZ0lEfWApO1xyXG5cclxuXHRcdFx0XHRcdG5ld0xpc3RpbmcuaW5uZXJIVE1MID0gYDxpbWcgY2xhc3M9XCJqb2JzX19sb2dvXCIgc3JjPVwiJHtvYmoubG9nb31cIiBhbHQ9XCJjb21wYW55IGxvZ29cIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJqb2JzX19vZmZlciBtZS1tZC0zIG1lLWxnLTBcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiam9ic19faGVhZGVyIGQtZmxleCBnYXAtMyBnYXAtbWQtMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImpvYnNfX2NvbXBhbnktbmFtZSBtZS00IG1lLW1kLTMgbWItMFwiPiR7b2JqLmNvbXBhbnl9PC9wPlxyXG5cclxuXHRcdFx0XHRcdFx0JHtidG5OZXd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR7YnRuRmVhdHVyZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJqb2JzX19vZmZlcmVkLWpvYiBtLW1kLTAgbXktbWQtMSBcIj4ke29iai5wb3NpdGlvbn0gPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwiam9ic19fam9iLW9mZmVyIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcclxuICAgICAgICAgICAgICAgICAgICBwYi0xIHAtbWQtMSBtLW1kLTBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtvYmoucG9zdGVkQXR9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRvdFwiPiZidWxsOzwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtvYmouY29udHJhY3R9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRvdFwiPiZidWxsOzwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtvYmoubG9jYXRpb259PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImpvYnNfX3RhZ3MgZC1mbGV4IGdhcC00IGZsZXgtd3JhcCBtcy1tZC1hdXRvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImpvYnNfX2J1dHRvblwiPiR7b2JqLmxhbmd1YWdlc1swXX08L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiam9ic19fYnV0dG9uXCI+JHtvYmoubGFuZ3VhZ2VzWzFdfTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJqb2JzX19idXR0b25cIj5IVE1MPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImpvYnNfX2J1dHRvblwiPkNTUzwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJqb2JzX19idXR0b25cIj5KYXZhU2NyaXB0PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5gO1xyXG5cclxuXHRcdFx0XHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZChuZXdMaXN0aW5nKTtcclxuXHRcdFx0XHRcdGxpc3RpbmdJRCsrO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coJ2Vycm9yJykpO1xyXG5cdH07XHJcblxyXG5cdGZldGNoQVBJKCk7XHJcbn0pO1xyXG4iXX0=
